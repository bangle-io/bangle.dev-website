(self.webpackChunkbangle_dev_website=self.webpackChunkbangle_dev_website||[]).push([[4777],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return m},kt:function(){return k}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),d=s(n),k=r,u=d["".concat(l,".").concat(k)]||d[k]||c[k]||o;return n?a.createElement(u,i(i({ref:t},m),{},{components:n})):a.createElement(u,i({ref:t},m))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2802:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return m},default:function(){return d}});var a=n(2122),r=n(9756),o=(n(7294),n(3905)),i=["components"],p={title:"@bangle.dev/core",sidebar_label:"@bangle.dev/core",packageName:"@bangle.dev/core",id:"core"},l=void 0,s={unversionedId:"api/core",id:"api/core",isDocsHomePage:!1,title:"@bangle.dev/core",description:"@bangle.dev/core as the name suggests is the core of Bangle and most packages expect it as a peer dependency. To install run:",source:"@site/docs/api/core.md",sourceDirName:"api",slug:"/api/core",permalink:"/docs/api/core",editUrl:"https://github.com/bangle-io/bangle.dev-website/edit/main/docs/api/core.md",version:"current",frontMatter:{title:"@bangle.dev/core",sidebar_label:"@bangle.dev/core",packageName:"@bangle.dev/core",id:"core"},sidebar:"docs",previous:{title:"@bangle.dev/base-components",permalink:"/docs/api/base_components"},next:{title:"@bangle.dev/emoji",permalink:"/docs/api/emoji"}},m=[{value:"Component",id:"component",children:[{value:"Spec",id:"spec",children:[]},{value:"Plugins",id:"plugins",children:[]},{value:"Plugin",id:"plugin",children:[]},{value:"KeybindingsObject",id:"keybindingsobject",children:[]},{value:"CommandObject",id:"commandobject",children:[]}]},{value:"Command",id:"command",children:[]},{value:"QueryCommand",id:"querycommand",children:[]},{value:"BangleEditor",id:"bangleeditor",children:[]},{value:"BangleEditorState",id:"bangleeditorstate",children:[]},{value:"SpecRegistry",id:"specregistry",children:[]}],c={toc:m};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@bangle.dev/core")," as the name suggests is the core of Bangle and most packages expect it as a ",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/en/blog/npm/peer-dependencies/"},"peer dependency"),". To install run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# peer deps\nnpm install @bangle.dev/pm\nnpm install @bangle.dev/core\n")),(0,o.kt)("p",null,"\ud83d\udca1 ",(0,o.kt)("em",{parentName:"p"},"Use the right sidebar or the hamburger at bottom-right (mobile screens) to navigate quickly"),"."),(0,o.kt)("h2",{id:"component"},"Component"),(0,o.kt)("p",null,"The building block of Bangle is a component. At it's heart, we have a vanilla Javascript module which exports the follow properties:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"?spec(opts: Object):")," ",(0,o.kt)("a",{parentName:"p",href:"#spec"},"Spec"),(0,o.kt)("br",{parentName:"p"}),"\n","The specification which defines how the component will be rendered in the Editor. If the component has nothing to render it will not export this method.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"?plugins(opts: Object):")," ",(0,o.kt)("a",{parentName:"p",href:"#plugins"},"Plugins"),(0,o.kt)("br",{parentName:"p"}),"\n","This injects the superpowers \ud83e\uddd9\u200d\u2640\ufe0f to your component. Fantasy aside: you can pretty do anything to your node/mark with Plugins.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"?commands:")," ",(0,o.kt)("a",{parentName:"p",href:"#commandobject"},"CommandObject"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"?defaultKeys:")," ",(0,o.kt)("a",{parentName:"p",href:"#keybindingsobject"},"KeybindingsObject")))),(0,o.kt)("h3",{id:"spec"},"Spec"),(0,o.kt)("p",null,"An object with the following fields:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"type"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"'node'")," | ",(0,o.kt)("inlineCode",{parentName:"p"},"'mark'"),(0,o.kt)("br",{parentName:"p"}),"\n","This is a Prosemirror concept which divides the spec in two groups ",(0,o.kt)("inlineCode",{parentName:"p"},"node")," type or ",(0,o.kt)("inlineCode",{parentName:"p"},"mark")," type. Please checkout ",(0,o.kt)("a",{parentName:"p",href:"/docs/guides/first-editor"},"Your first editor guide")," guide.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"topNode"),": ?boolean",(0,o.kt)("br",{parentName:"p"}),"\n","Whether the node will be the top node for the document. By default the ",(0,o.kt)("inlineCode",{parentName:"p"},"doc")," node is the top node for Bangle. There can only be one top ",(0,o.kt)("inlineCode",{parentName:"p"},"node")," and is only applicable for ",(0,o.kt)("inlineCode",{parentName:"p"},"node")," types.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"name"),": string",(0,o.kt)("br",{parentName:"p"}),"\n","The name of the node or mark.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"schema"),": ",(0,o.kt)("a",{parentName:"p",href:"https://prosemirror.net/docs/ref/#model.NodeSpec"},"Prosemirror.NodeSpec")," | ",(0,o.kt)("a",{parentName:"p",href:"https://prosemirror.net/docs/ref/#model.MarkSpec"},"Prosemirror.MarkSpec"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"markdown"),": ?{toMarkdown: fn(), parseMarkdown: object}\\  ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"options"),": ?object",(0,o.kt)("br",{parentName:"p"}),"\n","Use this to save data in this spec. You can use this field to save some data options to make it available to anyone having access to specRegistry."))),(0,o.kt)("h3",{id:"plugins"},"Plugins"),(0,o.kt)("p",null,"\ud83e\udde0 ",(0,o.kt)("em",{parentName:"p"},"Please note this is a ",(0,o.kt)("strong",{parentName:"em"},"recursive")," type - it contains reference to itself!")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"https://prosemirror.net/docs/ref/#state.PluginSpec"},"Prosemirror.Plugin")," | ",(0,o.kt)("a",{parentName:"p",href:"#plugins"},"Plugins"),"[","]"," | (fn({ schema, specRegistry, metadata }) -> ",(0,o.kt)("a",{parentName:"p",href:"#plugins"},"Plugins"),") | undefined")),(0,o.kt)("p",null,"This is designed in a way to provide flexibility and extensibility when grouping multiple plugins under a ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/core/#component"},"Component"),". Please checkout this ",(0,o.kt)("a",{parentName:"p",href:"/docs/examples/exporting-data#persisting-to-local-storage"},"example")," on how to create a small plugin or read the source code of some of the core components."),(0,o.kt)("h3",{id:"plugin"},"Plugin"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"https://prosemirror.net/docs/ref/#state.PluginSpec"},"Prosemirror.Plugin"))),(0,o.kt)("h3",{id:"keybindingsobject"},"KeybindingsObject"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"{ ","[","string","]",": string | undefined }")),(0,o.kt)("p",null,"An object which defines the keybindings that are active for a given component. The keys are the name given to an action and the value is valid ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/marijnh/w3c-keyname#readme"},"w3c-keyname"),". Setting a key to undefined will make it a ",(0,o.kt)("inlineCode",{parentName:"p"},"no-op"),"."),(0,o.kt)("p",null,"In the example below, it tells that an action named ",(0,o.kt)("inlineCode",{parentName:"p"},"moveUp")," will be executed when a user presses ",(0,o.kt)("inlineCode",{parentName:"p"},"Alt")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ArrowUp")," key."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"{\n  'moveUp': 'Alt-ArrowUp'\n}\n")),(0,o.kt)("p",null,"\ud83d\udcd6 ",(0,o.kt)("strong",{parentName:"p"},"Please checkout the ",(0,o.kt)("a",{parentName:"strong",href:"/docs/guides/keybindings"},"Keybindings Guide"))),(0,o.kt)("h3",{id:"commandobject"},"CommandObject"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"{ ","[","string","]",": fn(opts: object) -> ",(0,o.kt)("a",{parentName:"p",href:"#command"},"Command")," }")),(0,o.kt)("p",null,"A collection of commands exported by a component."),(0,o.kt)("h2",{id:"command"},"Command"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"fn(state: ",(0,o.kt)("a",{parentName:"p",href:"https://prosemirror.net/docs/ref/#state.EditorState"},"Prosemirror.EditorState"),", ?dispatch: ?\u2060fn(tr: ",(0,o.kt)("a",{parentName:"p",href:"https://prosemirror.net/docs/ref/#state.Transaction"},"Prosemirror.Transaction"),"), ?view: ",(0,o.kt)("a",{parentName:"p",href:"https://prosemirror.net/docs/ref/#view.EditorView"},"Prosemirror.EditorView"),") -> boolean")),(0,o.kt)("p",null,"A function that carries out a bunch of transformations in the editor. The return value indicates whether it was executed or not. For example, running a ",(0,o.kt)("a",{parentName:"p",href:"#bold-component"},"toggleBold")," command on a code block will return ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," to indicate command did not execute, however it will return ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," when run on a paragraph."),(0,o.kt)("p",null,"If a ",(0,o.kt)("inlineCode",{parentName:"p"},"dispatch")," callback is ",(0,o.kt)("strong",{parentName:"p"},"not")," passed, the command will run in dry run mode -- it will pretend to do things but will actually make ",(0,o.kt)("strong",{parentName:"p"},"no changes")," to the editor."),(0,o.kt)("p",null,"\ud83d\udca1 ",(0,o.kt)("em",{parentName:"p"},"Bangle's API will ",(0,o.kt)("strong",{parentName:"em"},"always")," export a higher order function which then returns a Command, which means it will not export a Command directly. It is designed this way to allow for configurability and to keep the command params predictable --")," ",(0,o.kt)("inlineCode",{parentName:"p"},"(config) => (state, dispatch, view) => boolean"),"."),(0,o.kt)("p",null,"Please read ",(0,o.kt)("a",{parentName:"p",href:"/docs/guides/commands"},"commands guide")," for more details."),(0,o.kt)("h2",{id:"querycommand"},"QueryCommand"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"fn(state: ",(0,o.kt)("a",{parentName:"p",href:"https://prosemirror.net/docs/ref/#state.EditorState"},"Prosemirror.EditorState"),") -> T")),(0,o.kt)("p",null,"This is a special type of command which makes no changes to the editor but queries the editor state and returns the value."),(0,o.kt)("p",null,"\ud83d\udca1 ",(0,o.kt)("em",{parentName:"p"},"Bangle follows the convention of prefixing")," ",(0,o.kt)("inlineCode",{parentName:"p"},"query")," ",(0,o.kt)("em",{parentName:"p"},"to ",(0,o.kt)("strong",{parentName:"em"},"any")," function that returns a QueryCommand.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { heading } from '@bangle.dev/base-components';\n\nconst isActive = heading.commands.queryIsHeadingActive(3)(state); // true or false\n")),(0,o.kt)("p",null,"In the example above, ",(0,o.kt)("a",{parentName:"p",href:"#heading-component"},"queryIsHeadingActive")," queries the editor state's selection for a node with name ",(0,o.kt)("inlineCode",{parentName:"p"},"heading")," having a level of ",(0,o.kt)("inlineCode",{parentName:"p"},"3"),"."),(0,o.kt)("h2",{id:"bangleeditor"},"BangleEditor"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"new BangleEditor(element, options)")),(0,o.kt)("p",null,"Initializes and mounts the editor in your application. Create an editor instance with following params:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"element:")," : ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Node"},"dom.Node"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"options:")," Object",(0,o.kt)("br",{parentName:"p"}),"\n","Has the following named parameters"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"state:")," ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/core/#bangleeditorstate"},"BangleEditorState"),(0,o.kt)("br",{parentName:"p"}),"\n","The editor state object.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"focusOnInit:")," ?boolean=true",(0,o.kt)("br",{parentName:"p"}),"\n","Focus the editor after initialization.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"pmViewOpts"),": ?",(0,o.kt)("a",{parentName:"p",href:"https://prosemirror.net/docs/ref/#view.DirectEditorProps"},"Prosemirror.DirectEditorProps"),(0,o.kt)("br",{parentName:"p"}),"\n","An object containing PM's editor props."))))),(0,o.kt)("p",null,"The class exposes the following fields/methods:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"focusView()"),": void",(0,o.kt)("br",{parentName:"p"}),"\n","Focus the editor.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"destroy():")," void",(0,o.kt)("br",{parentName:"p"}),"\n","Destroy the editor instance.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"toHTMLString():")," string",(0,o.kt)("br",{parentName:"p"}),"\n","Returns the HTML representation of editors content.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"view:")," ",(0,o.kt)("a",{parentName:"p",href:"https://prosemirror.net/docs/ref/#view.EditorView"},"Prosemirror.EditorView")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Usage")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { BangleEditor, BangleEditorState } from '@bangle.dev/core';\n\n// 'editor' is the id of the dom Node on which bangle will\n// be mounted.\nconst editorNode = document.getElementById('editor');\n\nconst state = new BangleEditorState({\n  initialValue: 'Hello world!',\n});\n\nconst editor = new BangleEditor(editorNode, { state });\n\nconst view = editor.view;\n// Programmatically type\nview.dispatch(view.state.tr.insertText('Wow'));\n")),(0,o.kt)("p",null,"\ud83d\udcd6 See ",(0,o.kt)("a",{parentName:"p",href:"/docs/examples/markdown-editor"},"Bangle Markdown example")),(0,o.kt)("h2",{id:"bangleeditorstate"},"BangleEditorState"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"new BangleEditorState(options)")),(0,o.kt)("p",null,"Create an editor state instance with following params:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"options:")," Object"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"specRegistry:")," ?",(0,o.kt)("a",{parentName:"p",href:"/docs/api/core/#specregistry"},"SpecRegistry"),(0,o.kt)("br",{parentName:"p"}),"\n","The SpecRegistry of your editor. Note: you can either set ",(0,o.kt)("inlineCode",{parentName:"p"},"specRegistry")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"specs")," but ",(0,o.kt)("em",{parentName:"p"},"not")," both.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"specs:")," ?",(0,o.kt)("a",{parentName:"p",href:"#spec"},"Spec"),"[","]",(0,o.kt)("br",{parentName:"p"}),"\n","A shorthand which initializes SpecRegistry for you behind the scenes. Use this if you don't care about creating and managing a SpecRegistry instance. \u26a0\ufe0f Note: you can either set ",(0,o.kt)("inlineCode",{parentName:"p"},"specRegistry")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"specs")," but ",(0,o.kt)("em",{parentName:"p"},"not")," both.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"plugins:")," ?({ schema, specRegistry, metadata }) -> ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/core/#plugins"},"Plugins"),"[","]",(0,o.kt)("br",{parentName:"p"}),"\n","The list of plugins for your editor.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"pluginMetadata"),": ?Object",(0,o.kt)("br",{parentName:"p"}),"\n","An object that will be then passed to any plugin (see the ",(0,o.kt)("inlineCode",{parentName:"p"},"options.plugins")," ) as a ",(0,o.kt)("inlineCode",{parentName:"p"},"metadata")," named parameter. Use this to relay any information about the editor to a plugin.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"initialValue:")," string | htmlString | undefined",(0,o.kt)("br",{parentName:"p"}),"\n","The initial content of the editor.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"editorProps:")," ",(0,o.kt)("a",{parentName:"p",href:"https://prosemirror.net/docs/ref/#view.EditorProps"},"Prosemirror.EditorProps"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"pmStateOpts:")," ?",(0,o.kt)("a",{parentName:"p",href:"https://prosemirror.net/docs/ref/#state.EditorState%5Ecreate"},"Prosemirror.EditorStateCreateConfig")))))),(0,o.kt)("p",null,"The class exposes the following fields/methods:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"specRegistry:")," ",(0,o.kt)("a",{parentName:"p",href:"#specregistry"},"SpecRegistry"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"pmState:")," ",(0,o.kt)("a",{parentName:"p",href:"https://prosemirror.net/docs/ref/#state.EditorState"},"Prosemirror.EditorState")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Usage")),(0,o.kt)("p",null,"See usage of ",(0,o.kt)("a",{parentName:"p",href:"#bangleeditor"},"BangleEditor"),"."),(0,o.kt)("h2",{id:"specregistry"},"SpecRegistry"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"new SpecRegistry(specs, options)")),(0,o.kt)("p",null,"A wrapper class which sets up the ",(0,o.kt)("a",{parentName:"p",href:"https://prosemirror.net/docs/ref/#model.Schema"},"Prosemirror.Schema"),". SpecRegistry combines and merges all the ",(0,o.kt)("a",{parentName:"p",href:"#spec"},"spec"),"'s of your components."),(0,o.kt)("p",null,"Params:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"specs:")," ?",(0,o.kt)("a",{parentName:"p",href:"#spec"},"Spec"),"[","]",(0,o.kt)("br",{parentName:"p"}),"\n","An array containing the specs. Note: the order of specs matters.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"options:")," ?Object"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"defaultSpecs:")," ?boolean=true",(0,o.kt)("br",{parentName:"li"}),"Automatically include critical spec",(0,o.kt)("inlineCode",{parentName:"li"},"doc"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"text")," & ",(0,o.kt)("inlineCode",{parentName:"li"},"paragraph")," if they are ",(0,o.kt)("strong",{parentName:"li"},"not")," already provided in the ",(0,o.kt)("inlineCode",{parentName:"li"},"specs")," param.")))),(0,o.kt)("p",null,"The class exposes the following fields/methods:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"schema:")," ",(0,o.kt)("a",{parentName:"p",href:"https://prosemirror.net/docs/ref/#model.Schema"},"Prosemirror.Schema"),(0,o.kt)("br",{parentName:"p"}),"\n","The Prosemirror schema instance associated with the specRegistry. This comes in handy when dealing directly with Prosemirror libraries.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"options:")," Object<name, object>",(0,o.kt)("br",{parentName:"p"}),"\n","A dictionary of the key value pair of ",(0,o.kt)("inlineCode",{parentName:"p"},"node")," or",(0,o.kt)("inlineCode",{parentName:"p"},"mark")," name and the option field in their ",(0,o.kt)("a",{parentName:"p",href:"#spec"},"spec"),"."))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Usage")),(0,o.kt)("p",null,"In the example below, we are loading a bunch of specs & plugins."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  SpecRegistry,\n  BangleEditorState,\n  BangleEditor\n} from '@bangle.dev/core';\nimport {\n  bulletList,\n  listItem,\n  orderedList,\n  bold,\n  link\n} from '@bangle.dev/base-components';\n\nconst specRegistry = new SpecRegistry([\n  link.spec(),\n  bold.spec(),\n  bulletList.spec(),\n  listItem.spec(),\n  orderedList.spec(),\n]);\nconst plugins = [\n  link.plugins(),\n  bold.plugins(),\n  bulletList.plugins(),\n  listItem.plugins(),\n  orderedList.plugins(),\n];\nconst editorNode = document.queryElement('#editor');\nconst state = new BangleEditorState({\n  specRegistry,\n  plugins,\n  initialValue: 'Hello world!',\n});\nconst editor = new BangleEditor(editorNode, { state });\n")))}d.isMDXComponent=!0}}]);